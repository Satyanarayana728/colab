import numpy as np
import matplotlib.pyplot as ax
import pandas as pd
from prettytable import PrettyTable
S = [[-1,-1,1,1,2,2],[1,2,0,2,-1,2]]
W=[[0,-1,2],[2,0,1]]
d=[0, 0, 0]
lr=0.3;
p=[];
def plots(S,C):
  fig,plt=ax.subplots()
  fig.set_size_inches(6,6)
  plt.scatter(np.array(S)[0,:],np.array(S)[1,:])
  #DISPLAY THE CLUSTER CENTER POINTS ON PLOT as square boxes
  plt.scatter(np.array(W)[0,:],np.array(W)[1,:],marker='s')
  #SET THE AXIS DISPLAY RANGE
  ax.xlim(-2, 3)
  ax.ylim(-2, 3)
  plt.spines['left'].set_position('zero')
  plt.spines['right'].set_color('none')
  plt.yaxis.tick_left()
  plt.spines['bottom'].set_position('zero')
  plt.spines['top'].set_color('none')
  plt.xaxis.tick_bottom()
  for i in range(len(np.array(S)[0,:])):
    plt.annotate("S"+str(i)+"("+str(S[0][i])+", "+str(S[1][i])+")",(S[0][i],S[1][i]),
                 xytext=(1, 4),textcoords='offset points',va='bottom')
  for i in range(len(np.array(W)[0,:])):
    plt.annotate("C"+str(i)+"("+str(W[0][i])+", "+str(W[1][i])+")",(W[0][i],W[1][i]),
                 xytext=(-54, -4),textcoords='offset points',va='top')
  return
plots(S,W)
print("\n Initial clusters \n")
t = PrettyTable(['x', 'Squared Euclidian Distance','Minium of D0,D1,D2',
                 'Winner cluster'])
for j in range(len(np.array(S)[0,:])):
  for i in range(len(np.array(W)[0,:])):
    d[i]=sum(np.square(np.array(W)[:,i]-np.array(S)[:,j]))
    p=np.argmin(d)
  t.add_row([np.array(S)[:,j], np.array(d),p,"C["+str(p)+"]"])
print (t)
epochs=2
print("\n Training the network begin here\n")
for k in range(epochs):
  print("\n Epoch Number", k+1)
  #print("x1  x2  \t  Distance \t\t minimum D \t\t  Winnercluster \t New code vectors" )
  t = PrettyTable(['x', 'Dist','minium Dist','Winner cluster',"New code Vectors"])
  for j in range(len(np.array(S)[0,:])):
    for i in range(len(np.array(W)[0,:])):
      d[i]=round(sum(np.square(np.array(W)[:,i]-np.array(S)[:,j])),2)
      p=np.argmin(d)
    dw=lr*np.subtract(np.array(S)[:,j],np.array(W)[:,p])
    W[0][p]+=round(dw[0],2)
    W[1][p]+=round(dw[1],2)
    t.add_row([np.array(S)[:,j],np.array(d),p,"C["+str(p)+"]",np.transpose(np.array(W))])
  W=np.round_(W,decimals=2)
  plots(S,W)
  print(t)
